dnl Process this file with autoconf to produce a configure script.

AC_INIT(TrustedQSL, 1.13, lotw-help@arrl.org, TrustedQSL)
AM_INIT_AUTOMAKE
AC_CONFIG_HEADERS(sysconfig.h)
AC_CANONICAL_HOST
AC_CONFIG_SRCDIR(tqsl.cpp)

TQSL_VERSION_MAJOR=`echo $VERSION | sed -e 's/\..*//'`
TQSL_VERSION_MINOR=`echo $VERSION | sed -e 's/.*\.//'`
AC_SUBST(TQSL_VERSION_MAJOR)
AC_SUBST(TQSL_VERSION_MINOR)
WINVER=`echo "$VERSION" | sed -e 's/\.//'`
AC_SUBST(WINVER)

dnl Set defines for platforms

TQSLLIBFILE="tqsllib"
tqslresources=
tqslcertresources=
dyn_lib_suf=".so"

case "$build_os" in
  darwin*) platform="-DMAC"
	add_targets='dist/TrustedQSL/tqsl.app dist/TrustedQSL/tqslcert.app'
	dyn_lib_suf=".dylib"
    ;;
  mingw32) platform=-DWINDOWS
	WINWD=`cmd /c cd`
	TQSLLIBFILE="tqsllibd"
    tqslresources="tqsl-resources.o"
	tqslcertresources="tqslcert-resources.o"
	;;
esac

AC_SUBST(platform)
AC_SUBST(add_targets)
AC_SUBST(WINWD)
AC_SUBST(tqslresources)
AC_SUBST(tqslcertresources)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(PERL, perl)
AC_PATH_PROG(TOUCH, touch)
AC_PATH_PROG(MKDIR, mkdir)
AC_PATH_PROG(STRIP, strip)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(ECHO, echo)

checktqsllib(){
  if test -z "$TQSLLIB"; then
    if test -e "$1/lib$TQSLLIBFILE.a" || test -e "$1/lib$TQSLLIBFILE$dyn_lib_suf"; then
      TQSLLIB="$1"
    fi
  fi
}

checktqslinc(){
  if test -z "$TQSLINC"; then
    if test -e "$1/tqsllib.h"; then
      TQSLINC="$1"
    fi
  fi
}

checkssldir(){
  if test -z "$OPENSSL"; then
    if test -e "$1/lib/libcrypto.a" || test -e "$1/lib/libcrypto$dyn_lib_suf"; then
      OPENSSL="$1"
    fi
  fi
}

checkexpatdir(){
  if test -z "$EXPAT"; then
    if test -e "$1/lib/libexpat.a" || test -e "$1/lib/libexpat$dyn_lib_suf"; then
      EXPAT="$1"
    fi
  fi
}

checkwxdir(){
  if test -z "$WXDIR"; then
    if test -e "$1/bin/wx-config"; then
      WXDIR="$1"
    fi
  fi
}

checkzlibdir(){
  if test -z "$ZLIB"; then
    if test -e "$1/lib/libz.a" || test -e "$1/lib/libz$dyn_lib_suf"; then
      ZLIB="$1"
    fi
  fi
}

checkinnodir(){
  if test -z "$INNODIR"; then
    if test -x "$1/ISCC.exe"; then
      INNODIR="$1"
    fi
  fi
}

sslcheck() {
      AC_MSG_CHECKING([for OpenSSL library (libcrypto.a)])
      checkssldir "$HOME/openssl"; checkssldir "/usr"; checkssldir "/usr/local";
      checkssldir "/usr/local/ssl"
      if test -z "$OPENSSL"; then
        AC_MSG_RESULT(Not found)
        echo
        echo "OpenSSL not found"
        echo "Use --with-openssl option to fix this problem"
        echo
        exit 1
      fi
      AC_MSG_RESULT($OPENSSL)
    AC_SUBST(OPENSSL)
}

checkopenssl=yes
dnl Check for OpenSSL
AC_ARG_WITH(openssl,
  [AC_HELP_STRING( [--with-openssl=DIR], [location of OpenSSL files])],
  [
    if test "$withval" = "no"; then
      checkopenssl=
    elif test "$withval" != "yes"; then
      OPENSSL="$withval"
    else
      sslcheck
    fi
  ],
  [ sslcheck ]
)

dnl Check for tqsllib
AC_MSG_CHECKING([for tqsllib library])
AC_ARG_WITH(tqsllib,
  [AC_HELP_STRING( [--with-tqsllib=DIR], [location of tqsllib files])],
  [ checktqsllib "$withval/lib"; checktqsllib "$withval/.libs"; checktqsllib "$withval" ],
  [ checktqsllib "$HOME/tqsllib/lib"; checktqsllib "/usr/lib"; checktqsllib "/usr/local/lib";
	checktqsllib "../tqsllib"; checktqsllib "../tqsllib/.libs" ]
)
if test -z "$TQSLLIB"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "tqsllib not found"
  echo "Use --with-tqsllib option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($TQSLLIB)
AC_SUBST(TQSLLIB)

dnl Check for tqsllib headers
AC_MSG_CHECKING([for tqsllib headers])
AC_ARG_WITH(tqslinc,
  [AC_HELP_STRING( [--with-tqslinc=DIR],[location of tqsllib headers])],
  [ checktqslinc "$withval/include"; checktqslinc "$withval" ],
  [ checktqslinc "$TQSLLIB"; checktqslinc "`dirname $TQSLLIB`/include";
    checktqslinc "$HOME/tqsllib/include"; checktqslinc "/usr/include";
    checktqslinc "/usr/local/include"; checktqslinc "../tqsllib" ]
)
if test -z "$TQSLINC"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "tqsllib headers not found"
  echo "Use --with-tqslinc option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($TQSLINC)
AC_SUBST(TQSLINC)

dnl Check for zlib
AC_MSG_CHECKING([for zlib library (libz.a)])
AC_ARG_WITH(zlib,
  [AC_HELP_STRING([--with-zlib=DIR], [location of zlib library files])],
  [ checkzlibdir "$withval" ],
  [ checkzlibdir "$HOME/zlib"; checkzlibdir "/usr"; checkzlibdir "/usr/local" ]
)
if test -z "$ZLIB"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "zlib not found"
  echo "Use --with-zlib option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($ZLIB)
AC_SUBST(ZLIB)

dnl Check for expat
AC_MSG_CHECKING([for expat library (libexpat.a)])
AC_ARG_WITH(expat,
  [AC_HELP_STRING([--with-expat=DIR], [location of expat library files])],
  [ checkexpatdir "$withval" ],
  [ checkexpatdir "$HOME/expat"; checkexpatdir "/usr"; checkexpatdir "/usr/local" ]
)
if test -z "$EXPAT"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "expat not found"
  echo "Use --with-expat option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($EXPAT)
AC_SUBST(EXPAT)

dnl Check for wxWindows
AC_MSG_CHECKING([for wxWindows])
AC_ARG_WITH(wxwindows,
  [AC_HELP_STRING([--with-wxwindows=DIR], [location of wxWindows files])],
  [ checkwxdir "$withval" ],
  [ checkwxdir "$HOME/wx"; checkwxdir "/usr"; checkwxdir "/usr/local" ]
)
if test -z "$WXDIR"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "wxWindows not found"
  echo "Use --with-wxwindows option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($WXDIR)
AC_SUBST(WXDIR)

dnl Check for Inno Setup
if test "$build_os" = "mingw32"; then
AC_MSG_CHECKING([for Inno Setup])
AC_ARG_WITH(inno,
  [AC_HELP_STRING([--with-inno=DIR], [location of Inno Setup program])],
  [ checkinnodir "$withval" ],
  [ checkinnodir "C:/Program Files/Inno Setup 5";
  checkinnodir "C:/Program Files/Inno Setup 4";
  checkinnodir "C:/Program Files/Inno Setup 3" ]
)
if test -z "$INNODIR"; then
  AC_MSG_RESULT(Not found)
  echo
  echo "Inno Setup not found"
  echo "Use --with-inno option to fix this problem"
  echo
  exit 1
fi
AC_MSG_RESULT($INNODIR)
AC_SUBST(INNODIR)
fi

dnl openssl_static=
dnl AC_ARG_ENABLE(openssl-static, [AC_HELP_STRING([--enable-openssl-static], [link static OpenSSL library])],
dnl 	[ if test "$enableval" = "yes"; then openssl_static="$OPENSSL/lib/libcrypto.a"; checkopenssl=; fi ])
dnl AC_SUBST(openssl_static)

wxwin_libs=`$WXDIR/bin/wx-config --libs`
AC_ARG_ENABLE(wxwin-static, [AC_HELP_STRING([--enable-wxwin-static], [link static wxWindow libraries])],
	[ if test "$enableval" = "yes"; then wxwin_libs=`$WXDIR/bin/wx-config --static --libs`; fi ])
AC_SUBST(wxwin_libs)

if test -n "$OPENSSL"; then LIBRARY_PATH="$OPENSSL/lib"; fi
if test -n "$LIBRARY_PATH"; then LIBRARY_PATH="$LIBRARY_PATH:"; fi
LIBRARY_PATH="$LIBRARY_PATH$TQSLLIB:$EXPAT/lib:$ZLIB/lib"

export LIBRARY_PATH

dnl Checks for libraries.
AC_CHECK_LIB(z, main, , [ echo -e "\nlibz not found! (Use --with-zlib to correct)"; exit 1 ], -lstdc++)
AC_CHECK_LIB(expat, main, , [ echo -e "\nlibexpat not found! (Use --with-expat to correct)"; exit 1 ], -lstdc++)
if test -n "$checkopenssl"; then
  AC_CHECK_LIB(crypto, main, , [ echo -e "\nlibcrypto not found! (Use --with-openssl to correct)"; exit 1 ], -lstdc++)
fi

if test "$build_os" = "mingw32"; then
	AC_CHECK_LIB(tqsllibd, main, , [ echo -e "\nlibtqsllib not found! (Use --with-tqsllib to correct)"; exit 1 ], -lstdc++)
else
	AC_CHECK_LIB(tqsllib, main, , [ echo -e "\nlibtqsllib not found! (Use --with-tqsllib to correct)"; exit 1 ], -lstdc++)
fi

if test "$build_os" = "mingw32"; then
  wd=`pwd`
  cd "$TQSLLIB/.."
  WINTQSLDIR=`cmd /c cd`
  cd "$wd"
fi
AC_SUBST(WINTQSLDIR)

BUILD=unofficial
AC_ARG_WITH(build,
  [AC_HELP_STRING([--with-build=BUILDID], [set build ID])],
  [  BUILD=$withval ]
)
AC_SUBST(BUILD)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_CHECK_FUNCS(mkdir strerror)

AC_PROG_INSTALL
#AC_PREFIX_DEFAULT(/usr)

AC_OUTPUT(Makefile tqsl.rc tqslcert.rc setup.iss TrustedQSL.spec)
