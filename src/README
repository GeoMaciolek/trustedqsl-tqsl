Trusted QSL library (tqsllib)
2003-11-02 J. Bloom, KE3Z

If what you want to do is use tqsllib in your own program, consider
using one of the prebuilt packages at:
   http://sourceforge.net/projects/trustedqsl/

To build this library you'll need to have the OpenSSL library
(www.openssl.org). You also need the expat XML library
(http://www.jclark.com/xml/expat.html).

NOTE: Part of this library is exported from a separate source tree used
in LOTW server development. That accounts for some of the weirdness
you'll see in the source files.

Please report any problems and fixes to jbloom@arrl.org

NOTE: Previous versions used Makefile.lib. That's no longer the case.

BUILD
=====
Linux/Unix
----------
./configure
make
make install

This will build the library and a simple test programs.
(See the TESTING section below.)

If the OpenSSL files aren't where the compiler can find them, use the
--with-openssl option to specify the openssl base directory, which
should contain lib and include directories. Example:

   ./configure --with-openssl=/usr/local

The same applies to the expat library using --with-expat. For additional
options:

./configure --help

MacOS X
-------
Thanks to Steve Palm, N9YTY, for supplying the MacOS X supporting code.

The MacOS X library should normally be built as only a static library,
so any resulting bundle will be completely self-contained:

./configure --disable-shared
make

You probably do NOT want to do:
make install

See the additional comments above under Linux/Unix.

The tqsllib configuration file (config.xml) default location is handled
differently under MacOS. Rather than being placed in a fixed location,
the asumption is made that the file will be present in the application's
Resources folder.

Windows
-------
Note: if you are interested only in using tqsllib with your own
programs, you probably can use the prebuilt DLL. See the DEVELOPMENT
section below.

The library is built under MinGW. To build it, you need to install MinGW
and use it to build the OpenSSL library. You also need MSYS (available
from the MinGW site) or a similar environment. With that, you can follow
the instructions given above under Linux/Unix except using the Makefile.g95
file:

./configure
make -f Makefile.g95

Note: "make install" is not supported.

A Windows DLL of the expat library can be downloaded; you don't need to
build the library (although you can). You will, hovever, need to create an
import library (libexpat.a) using dlltool (part of the MinGW utilities).

tqsllib links with the zlib library (http://www.gzip.org/zlib/).
Since that library is provided with wxWindows and since tqsllib was
developed in an environment where wxWindows was present, Makefile.lib
just picks up zlib from the wxWindows directory. Absent wxWindows,
you'll have to provide zlib and change the makefile.

A DLL (tqsllib.dll) is also created, and the test applications (see the
TESTING section below) are linked against that DLL.

TESTING
=======
Source is provided for several programs that perform simple testing of the
library. If testing is being performed in an environment also used for
operation, you should probably set the TQSLDIR enviromnent variable to point
to a test directory before running the test programs. That will avoid
conflicts with the "real" certificate store. (NOTE: Under MacOS X, you will
HAVE to set TQSLDIR because the default path assumes a bundle, and the
test programs aren't in a bundle.)

The only test program built by default is dumptqsldata. The other test
programs can be built by specifying --enable-extrabin to ./configure.
(Under Windows, all of the test programs are built.)

In the test programs command-line arguments, the DXCC entity is the
entity number, not the name. DXCC entity numbers can be obtained from
dumptqsldata.

dumptqsldata - Lists the configuration information from the tqsllib
configuration file (config.xml), which must be present in the tqsllib
directory.

gen_crq - Generates a simple certificate request using fake address
data.

load_cert - Loads a certificate into the certificate store.

station_loc - Creates a minimal station location for the supplied call
sign and DXCC entity.

converter - Signs an ADIF or Cabrillo file using the specified station
location.

DOCUMENTATION
=============
API documentation can be found in the doxygen directory. You can rebuild
the documentation by simply running doxygen using the Doxyfile
configuraton file.

DEVELOPMENT
===========
A package for Windows development is available at:
   http://sourceforge.net/projects/trustedqsl/
That package contains the tqsllib DLL, needed header files and
documentation.

The header files that may be needed to use tqsllib are:
tqsllib.h
tqslerrno.h
adif.h
cabrillo.h
tqslconvert.h

(Additional header files are used to build the library.)
